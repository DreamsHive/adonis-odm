name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  check-changes:
    name: Check for Release-worthy Changes
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version-type: ${{ steps.check.outputs.version-type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: check
        run: |
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous release found, this will be the first release"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version-type=minor" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for changes since last release
          CHANGES=$(git diff --name-only $LAST_TAG..HEAD)

          # Check for breaking changes
          BREAKING_CHANGES=$(git log $LAST_TAG..HEAD --grep="BREAKING CHANGE" --oneline)

          # Check for new features
          FEATURES=$(git log $LAST_TAG..HEAD --grep="feat:" --oneline)

          # Check for bug fixes
          FIXES=$(git log $LAST_TAG..HEAD --grep="fix:" --oneline)

          # Check for source code changes
          SRC_CHANGES=$(echo "$CHANGES" | grep -E "^(src/|providers/|configure\.ts|package\.json)" || true)

          if [ -n "$BREAKING_CHANGES" ]; then
            echo "Breaking changes detected"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version-type=major" >> $GITHUB_OUTPUT
          elif [ -n "$FEATURES" ] || [ -n "$SRC_CHANGES" ]; then
            echo "New features or source changes detected"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version-type=minor" >> $GITHUB_OUTPUT
          elif [ -n "$FIXES" ]; then
            echo "Bug fixes detected"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version-type=patch" >> $GITHUB_OUTPUT
          else
            echo "No release-worthy changes detected"
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

  test:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-release == 'true'
    strategy:
      matrix:
        node-version: ['18', '20', '21']

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Wait for MongoDB
        run: |
          until mongosh --eval "print('MongoDB is ready')" > /dev/null 2>&1; do
            echo "Waiting for MongoDB..."
            sleep 2
          done

      - name: Run all tests
        run: |
          npm run test:all
        env:
          MONGO_URI: mongodb://localhost:27017/test_release_db

  build-and-validate:
    name: Build and Validate Package
    runs-on: ubuntu-latest
    needs: [check-changes, test]
    if: needs.check-changes.outputs.should-release == 'true'
    outputs:
      package-version: ${{ steps.version.outputs.new-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: version
        run: |
          VERSION_TYPE="${{ needs.check-changes.outputs.version-type }}"
          echo "Bumping version with type: $VERSION_TYPE"

          # Bump version
          NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update CHANGELOG
        run: |
          # Create or update CHANGELOG.md
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          DATE=$(date +%Y-%m-%d)

          # Get changes since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            CHANGES=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges)
          else
            CHANGES="- Initial release"
          fi

          # Create new changelog entry
          {
            echo "# Changelog"
            echo ""
            echo "## [$NEW_VERSION] - $DATE"
            echo ""
            echo "$CHANGES"
            echo ""
            if [ -f "docs/CHANGELOG.md" ]; then
              tail -n +3 docs/CHANGELOG.md
            fi
          } > docs/CHANGELOG.md.new

          mv docs/CHANGELOG.md.new docs/CHANGELOG.md

      - name: Build package
        run: npm run compile

      - name: Validate build
        run: |
          # Ensure all required files are built
          test -f build/src/index.js || (echo "Missing build/src/index.js" && exit 1)
          test -f build/src/index.d.ts || (echo "Missing build/src/index.d.ts" && exit 1)
          test -f build/providers/index.js || (echo "Missing build/providers/index.js" && exit 1)
          test -f build/configure.js || (echo "Missing build/configure.js" && exit 1)
          echo "✅ Build validation passed"

      - name: Test package
        run: |
          # Pack and test the package
          npm pack
          PACKAGE_FILE=$(ls *.tgz)

          # Test installation in a clean environment
          mkdir test-package
          cd test-package
          npm init -y
          npm install ../$PACKAGE_FILE

          # Test basic import
          node -e "
            const { BaseModel, column } = require('adonis-odm');
            console.log('✅ Package test passed');
            console.log('BaseModel type:', typeof BaseModel);
            console.log('column type:', typeof column);
          "

      - name: Commit version bump
        run: |
          git add package.json docs/CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.new-version }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            build/
            *.tgz
            package.json
            docs/CHANGELOG.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-changes, build-and-validate]
    if: needs.check-changes.outputs.should-release == 'true'
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Extract release notes
        id: release-notes
        run: |
          NEW_VERSION="${{ needs.build-and-validate.outputs.package-version }}"

          # Extract release notes from CHANGELOG
          if [ -f "docs/CHANGELOG.md" ]; then
            # Get content between the first two version headers
            RELEASE_NOTES=$(sed -n "/## \[$NEW_VERSION\]/,/## \[/p" docs/CHANGELOG.md | sed '$d' | tail -n +3)
          else
            RELEASE_NOTES="Release $NEW_VERSION"
          fi

          # Save to file for GitHub release
          echo "$RELEASE_NOTES" > release-notes.md

          echo "Release notes:"
          cat release-notes.md

      - name: Create Git tag
        run: |
          NEW_VERSION="${{ needs.build-and-validate.outputs.package-version }}"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-and-validate.outputs.package-version }}
          release_name: Release ${{ needs.build-and-validate.outputs.package-version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.build-and-validate.outputs.package-version, '-') }}

      - name: Upload package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./adonis-odm-${{ needs.build-and-validate.outputs.package-version }}.tgz
          asset_name: adonis-odm-${{ needs.build-and-validate.outputs.package-version }}.tgz
          asset_content_type: application/gzip

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [check-changes, build-and-validate, create-release]
    if: needs.check-changes.outputs.should-release == 'true'
    environment: npm-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Publish to NPM
        run: |
          NEW_VERSION="${{ needs.build-and-validate.outputs.package-version }}"

          # Check if this is a prerelease
          if [[ "$NEW_VERSION" == *"-"* ]]; then
            echo "Publishing prerelease version $NEW_VERSION with beta tag"
            npm publish --tag beta
          else
            echo "Publishing stable version $NEW_VERSION with latest tag"
            npm publish --tag latest
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify NPM publication
        run: |
          NEW_VERSION="${{ needs.build-and-validate.outputs.package-version }}"

          # Wait a bit for NPM to process
          sleep 30

          # Verify the package is available
          npm view adonis-odm@$NEW_VERSION version
          echo "✅ Package successfully published to NPM"

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [build-and-validate, create-release, publish-npm]
    if: success()
    steps:
      - name: Success notification
        run: |
          NEW_VERSION="${{ needs.build-and-validate.outputs.package-version }}"
          echo "🎉 Successfully released adonis-odm $NEW_VERSION!"
          echo "📦 NPM: https://www.npmjs.com/package/adonis-odm"
          echo "🏷️ GitHub: https://github.com/${{ github.repository }}/releases/tag/$NEW_VERSION"

  notify-failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs: [check-changes, test, build-and-validate, create-release, publish-npm]
    if: failure() && needs.check-changes.outputs.should-release == 'true'
    steps:
      - name: Failure notification
        run: |
          echo "❌ Release failed for adonis-odm"
          echo "Please check the workflow logs for details"
